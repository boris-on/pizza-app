// Generated by Dagger (https://dagger.dev).
package my.lovely.marketanalog.presentation.mainCatalog;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import my.lovely.domain.usecase.GetCatalogUseCase;
import my.lovely.domain.usecase.GetDateUseCase;
import my.lovely.domain.usecase.GetLocationUseCase;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class CatalogViewModel_Factory implements Factory<CatalogViewModel> {
  private final Provider<GetCatalogUseCase> getCatalogUseCaseProvider;

  private final Provider<GetDateUseCase> getDateUseCaseProvider;

  private final Provider<GetLocationUseCase> getLocationUseCaseProvider;

  public CatalogViewModel_Factory(Provider<GetCatalogUseCase> getCatalogUseCaseProvider,
      Provider<GetDateUseCase> getDateUseCaseProvider,
      Provider<GetLocationUseCase> getLocationUseCaseProvider) {
    this.getCatalogUseCaseProvider = getCatalogUseCaseProvider;
    this.getDateUseCaseProvider = getDateUseCaseProvider;
    this.getLocationUseCaseProvider = getLocationUseCaseProvider;
  }

  @Override
  public CatalogViewModel get() {
    return newInstance(getCatalogUseCaseProvider.get(), getDateUseCaseProvider.get(), getLocationUseCaseProvider.get());
  }

  public static CatalogViewModel_Factory create(
      Provider<GetCatalogUseCase> getCatalogUseCaseProvider,
      Provider<GetDateUseCase> getDateUseCaseProvider,
      Provider<GetLocationUseCase> getLocationUseCaseProvider) {
    return new CatalogViewModel_Factory(getCatalogUseCaseProvider, getDateUseCaseProvider, getLocationUseCaseProvider);
  }

  public static CatalogViewModel newInstance(GetCatalogUseCase getCatalogUseCase,
      GetDateUseCase getDateUseCase, GetLocationUseCase getLocationUseCase) {
    return new CatalogViewModel(getCatalogUseCase, getDateUseCase, getLocationUseCase);
  }
}
