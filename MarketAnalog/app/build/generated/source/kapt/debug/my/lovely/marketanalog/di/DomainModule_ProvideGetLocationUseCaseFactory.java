// Generated by Dagger (https://dagger.dev).
package my.lovely.marketanalog.di;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import my.lovely.domain.usecase.GetLocationUseCase;

@ScopeMetadata
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DomainModule_ProvideGetLocationUseCaseFactory implements Factory<GetLocationUseCase> {
  private final DomainModule module;

  private final Provider<Context> contextProvider;

  public DomainModule_ProvideGetLocationUseCaseFactory(DomainModule module,
      Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public GetLocationUseCase get() {
    return provideGetLocationUseCase(module, contextProvider.get());
  }

  public static DomainModule_ProvideGetLocationUseCaseFactory create(DomainModule module,
      Provider<Context> contextProvider) {
    return new DomainModule_ProvideGetLocationUseCaseFactory(module, contextProvider);
  }

  public static GetLocationUseCase provideGetLocationUseCase(DomainModule instance,
      Context context) {
    return Preconditions.checkNotNullFromProvides(instance.provideGetLocationUseCase(context));
  }
}
