// Generated by Dagger (https://dagger.dev).
package my.lovely.marketanalog.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import my.lovely.domain.repository.CatalogRepository;
import my.lovely.domain.usecase.GetCatalogUseCase;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DomainModule_ProvideCatalogUseCaseFactory implements Factory<GetCatalogUseCase> {
  private final DomainModule module;

  private final Provider<CatalogRepository> catalogRepositoryProvider;

  public DomainModule_ProvideCatalogUseCaseFactory(DomainModule module,
      Provider<CatalogRepository> catalogRepositoryProvider) {
    this.module = module;
    this.catalogRepositoryProvider = catalogRepositoryProvider;
  }

  @Override
  public GetCatalogUseCase get() {
    return provideCatalogUseCase(module, catalogRepositoryProvider.get());
  }

  public static DomainModule_ProvideCatalogUseCaseFactory create(DomainModule module,
      Provider<CatalogRepository> catalogRepositoryProvider) {
    return new DomainModule_ProvideCatalogUseCaseFactory(module, catalogRepositoryProvider);
  }

  public static GetCatalogUseCase provideCatalogUseCase(DomainModule instance,
      CatalogRepository catalogRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideCatalogUseCase(catalogRepository));
  }
}
