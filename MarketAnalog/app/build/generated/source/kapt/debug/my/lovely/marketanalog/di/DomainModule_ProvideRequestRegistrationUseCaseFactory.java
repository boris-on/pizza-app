// Generated by Dagger (https://dagger.dev).
package my.lovely.marketanalog.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import my.lovely.domain.repository.RegistrationRepository;
import my.lovely.domain.usecase.RequestRegistrationUseCase;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DomainModule_ProvideRequestRegistrationUseCaseFactory implements Factory<RequestRegistrationUseCase> {
  private final DomainModule module;

  private final Provider<RegistrationRepository> registrationRepositoryProvider;

  public DomainModule_ProvideRequestRegistrationUseCaseFactory(DomainModule module,
      Provider<RegistrationRepository> registrationRepositoryProvider) {
    this.module = module;
    this.registrationRepositoryProvider = registrationRepositoryProvider;
  }

  @Override
  public RequestRegistrationUseCase get() {
    return provideRequestRegistrationUseCase(module, registrationRepositoryProvider.get());
  }

  public static DomainModule_ProvideRequestRegistrationUseCaseFactory create(DomainModule module,
      Provider<RegistrationRepository> registrationRepositoryProvider) {
    return new DomainModule_ProvideRequestRegistrationUseCaseFactory(module, registrationRepositoryProvider);
  }

  public static RequestRegistrationUseCase provideRequestRegistrationUseCase(DomainModule instance,
      RegistrationRepository registrationRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideRequestRegistrationUseCase(registrationRepository));
  }
}
