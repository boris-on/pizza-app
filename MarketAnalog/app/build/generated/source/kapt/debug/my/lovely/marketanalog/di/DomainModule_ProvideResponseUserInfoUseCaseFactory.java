// Generated by Dagger (https://dagger.dev).
package my.lovely.marketanalog.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import my.lovely.domain.repository.GetDataRepository;
import my.lovely.domain.usecase.ResponseUserInfoUseCase;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DomainModule_ProvideResponseUserInfoUseCaseFactory implements Factory<ResponseUserInfoUseCase> {
  private final DomainModule module;

  private final Provider<GetDataRepository> getDataRepositoryProvider;

  public DomainModule_ProvideResponseUserInfoUseCaseFactory(DomainModule module,
      Provider<GetDataRepository> getDataRepositoryProvider) {
    this.module = module;
    this.getDataRepositoryProvider = getDataRepositoryProvider;
  }

  @Override
  public ResponseUserInfoUseCase get() {
    return provideResponseUserInfoUseCase(module, getDataRepositoryProvider.get());
  }

  public static DomainModule_ProvideResponseUserInfoUseCaseFactory create(DomainModule module,
      Provider<GetDataRepository> getDataRepositoryProvider) {
    return new DomainModule_ProvideResponseUserInfoUseCaseFactory(module, getDataRepositoryProvider);
  }

  public static ResponseUserInfoUseCase provideResponseUserInfoUseCase(DomainModule instance,
      GetDataRepository getDataRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideResponseUserInfoUseCase(getDataRepository));
  }
}
