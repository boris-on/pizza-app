// Generated by Dagger (https://dagger.dev).
package my.lovely.marketanalog.presentation.login;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import my.lovely.domain.usecase.RequestLoginUseCase;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class LoginViewModel_Factory implements Factory<LoginViewModel> {
  private final Provider<RequestLoginUseCase> requestLoginUseCaseProvider;

  public LoginViewModel_Factory(Provider<RequestLoginUseCase> requestLoginUseCaseProvider) {
    this.requestLoginUseCaseProvider = requestLoginUseCaseProvider;
  }

  @Override
  public LoginViewModel get() {
    return newInstance(requestLoginUseCaseProvider.get());
  }

  public static LoginViewModel_Factory create(
      Provider<RequestLoginUseCase> requestLoginUseCaseProvider) {
    return new LoginViewModel_Factory(requestLoginUseCaseProvider);
  }

  public static LoginViewModel newInstance(RequestLoginUseCase requestLoginUseCase) {
    return new LoginViewModel(requestLoginUseCase);
  }
}
