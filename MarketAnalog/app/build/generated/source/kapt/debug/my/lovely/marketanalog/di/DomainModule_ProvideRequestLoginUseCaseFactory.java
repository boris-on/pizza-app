// Generated by Dagger (https://dagger.dev).
package my.lovely.marketanalog.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import my.lovely.domain.repository.LoginRepository;
import my.lovely.domain.usecase.RequestLoginUseCase;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DomainModule_ProvideRequestLoginUseCaseFactory implements Factory<RequestLoginUseCase> {
  private final DomainModule module;

  private final Provider<LoginRepository> loginRepositoryProvider;

  public DomainModule_ProvideRequestLoginUseCaseFactory(DomainModule module,
      Provider<LoginRepository> loginRepositoryProvider) {
    this.module = module;
    this.loginRepositoryProvider = loginRepositoryProvider;
  }

  @Override
  public RequestLoginUseCase get() {
    return provideRequestLoginUseCase(module, loginRepositoryProvider.get());
  }

  public static DomainModule_ProvideRequestLoginUseCaseFactory create(DomainModule module,
      Provider<LoginRepository> loginRepositoryProvider) {
    return new DomainModule_ProvideRequestLoginUseCaseFactory(module, loginRepositoryProvider);
  }

  public static RequestLoginUseCase provideRequestLoginUseCase(DomainModule instance,
      LoginRepository loginRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideRequestLoginUseCase(loginRepository));
  }
}
