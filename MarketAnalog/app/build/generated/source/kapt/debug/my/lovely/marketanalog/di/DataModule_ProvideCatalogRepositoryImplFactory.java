// Generated by Dagger (https://dagger.dev).
package my.lovely.marketanalog.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import my.lovely.data.api.CatalogDataService;
import my.lovely.domain.repository.CatalogRepository;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DataModule_ProvideCatalogRepositoryImplFactory implements Factory<CatalogRepository> {
  private final DataModule module;

  private final Provider<CatalogDataService> dataServiceProvider;

  public DataModule_ProvideCatalogRepositoryImplFactory(DataModule module,
      Provider<CatalogDataService> dataServiceProvider) {
    this.module = module;
    this.dataServiceProvider = dataServiceProvider;
  }

  @Override
  public CatalogRepository get() {
    return provideCatalogRepositoryImpl(module, dataServiceProvider.get());
  }

  public static DataModule_ProvideCatalogRepositoryImplFactory create(DataModule module,
      Provider<CatalogDataService> dataServiceProvider) {
    return new DataModule_ProvideCatalogRepositoryImplFactory(module, dataServiceProvider);
  }

  public static CatalogRepository provideCatalogRepositoryImpl(DataModule instance,
      CatalogDataService dataService) {
    return Preconditions.checkNotNullFromProvides(instance.provideCatalogRepositoryImpl(dataService));
  }
}
