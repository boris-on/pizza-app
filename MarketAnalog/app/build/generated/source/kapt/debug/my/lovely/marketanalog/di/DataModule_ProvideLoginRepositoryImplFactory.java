// Generated by Dagger (https://dagger.dev).
package my.lovely.marketanalog.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import my.lovely.data.api.LoginService;
import my.lovely.domain.repository.LoginRepository;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DataModule_ProvideLoginRepositoryImplFactory implements Factory<LoginRepository> {
  private final DataModule module;

  private final Provider<LoginService> loginServiceProvider;

  public DataModule_ProvideLoginRepositoryImplFactory(DataModule module,
      Provider<LoginService> loginServiceProvider) {
    this.module = module;
    this.loginServiceProvider = loginServiceProvider;
  }

  @Override
  public LoginRepository get() {
    return provideLoginRepositoryImpl(module, loginServiceProvider.get());
  }

  public static DataModule_ProvideLoginRepositoryImplFactory create(DataModule module,
      Provider<LoginService> loginServiceProvider) {
    return new DataModule_ProvideLoginRepositoryImplFactory(module, loginServiceProvider);
  }

  public static LoginRepository provideLoginRepositoryImpl(DataModule instance,
      LoginService loginService) {
    return Preconditions.checkNotNullFromProvides(instance.provideLoginRepositoryImpl(loginService));
  }
}
